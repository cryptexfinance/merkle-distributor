{
  "address": "0xc40448C005890B102cA95f629ADf4360080Aebbe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x94e523700b00ae09a3dcb2cf272e722a98f7ce4884b14645131f8bb30f8da346",
  "receipt": {
    "to": null,
    "from": "0x71cEA4383F7FadDD1F17c960DE7b6A32bFDAf139",
    "contractAddress": "0xc40448C005890B102cA95f629ADf4360080Aebbe",
    "transactionIndex": 21,
    "gasUsed": "647629",
    "logsBloom": "0x
    "blockHash": "0xc404a238ffc8ebd7974bb97c7b5c21e7095eb0e36e7cfd900a1a001d0e721d0d",
    "transactionHash": "0x94e523700b00ae09a3dcb2cf272e722a98f7ce4884b14645131f8bb30f8da346",
    "logs": [],
    "blockNumber": 9494043,
    "cumulativeGasUsed": "5674769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAa715DbD2ED909B7B7727dC864F3B78276D14A19",
    "0xf3e2ea4c235de14ee793f105dbb1f54a4be38543c2996f3ea8a163363961d109",
    "0xa54074b2cc0e96a43048d4a68472F7F046aC0DA8"
  ],
  "solcInputHash": "27f1878dc63d45e29ee2732d4e540794",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MerkleDistributor.sol\":\"MerkleDistributor\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"src/MerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"../lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IMerkleDistributor.sol\\\";\\n\\ncontract MerkleDistributor is IMerkleDistributor {\\n   address public immutable override token;\\n   address public immutable treasury;\\n   bytes32 public immutable override merkleRoot;\\n   uint256 public immutable timeout;\\n   // This is a packed array of booleans.\\n   mapping(uint256 => uint256) private claimedBitMap;\\n\\n   constructor(\\n      address token_,\\n      bytes32 merkleRoot_,\\n      address treasury_\\n   ) {\\n      token = token_;\\n      merkleRoot = merkleRoot_;\\n      treasury = treasury_;\\n      timeout = block.timestamp + 4 weeks;\\n   }\\n\\n   function isClaimed(uint256 index) public view override returns (bool) {\\n      uint256 claimedWordIndex = index / 256;\\n      uint256 claimedBitIndex = index % 256;\\n      uint256 claimedWord = claimedBitMap[claimedWordIndex];\\n      uint256 mask = (1 << claimedBitIndex);\\n      return claimedWord & mask == mask;\\n   }\\n\\n   function _setClaimed(uint256 index) private {\\n      uint256 claimedWordIndex = index / 256;\\n      uint256 claimedBitIndex = index % 256;\\n      claimedBitMap[claimedWordIndex] =\\n         claimedBitMap[claimedWordIndex] |\\n         (1 << claimedBitIndex);\\n   }\\n\\n   function claim(\\n      uint256 index,\\n      address account,\\n      uint256 amount,\\n      bytes32[] calldata merkleProof\\n   ) external override {\\n      require(!isClaimed(index), \\\"MerkleDistributor: Drop already claimed.\\\");\\n\\n      // Verify the merkle proof.\\n      bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\n      require(\\n         MerkleProof.verify(merkleProof, merkleRoot, node),\\n         \\\"MerkleDistributor: Invalid proof.\\\"\\n      );\\n\\n      // Mark it claimed and send the token.\\n      _setClaimed(index);\\n      require(\\n         IERC20(token).transfer(account, amount),\\n         \\\"MerkleDistributor: Transfer failed.\\\"\\n      );\\n\\n      emit Claimed(index, account, amount);\\n   }\\n\\n   function endAirdrop() public {\\n      require(\\n         block.timestamp > timeout,\\n         \\\"MerkleDistributor: Timeout hasn't expired\\\"\\n      );\\n      IERC20(token).transfer(treasury, IERC20(token).balanceOf(address(this)));\\n   }\\n}\\n\",\"keccak256\":\"0xad2780f5213be4a1fd67760b8c10c8cad9b76ee821ffefa4c3f7ae1eb3e47da7\",\"license\":\"UNLICENSED\"},\"src/interfaces/IMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n// Allows anyone to claim a token if they exist in a merkle root.\\ninterface IMerkleDistributor {\\n   // Returns the address of the token distributed by this contract.\\n   function token() external view returns (address);\\n\\n   // Returns the merkle root of the merkle tree containing account balances available to claim.\\n   function merkleRoot() external view returns (bytes32);\\n\\n   // Returns true if the index has been marked claimed.\\n   function isClaimed(uint256 index) external view returns (bool);\\n\\n   // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\\n   function claim(\\n      uint256 index,\\n      address account,\\n      uint256 amount,\\n      bytes32[] calldata merkleProof\\n   ) external;\\n\\n   // This event is triggered whenever a call to #claim succeeds.\\n   event Claimed(uint256 index, address account, uint256 amount);\\n}\\n\",\"keccak256\":\"0xc7c5ade308aff9da514fba78ac9b483db7d8ee2f08961a591857a197b27e7de7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610c0f380380610c0f83398101604081905261003091610084565b6001600160601b0319606084811b821660805260c084905282901b1660a05261005c426224ea006100c0565b60e052506100e6915050565b80516001600160a01b038116811461007f57600080fd5b919050565b60008060006060848603121561009957600080fd5b6100a284610068565b9250602084015191506100b760408501610068565b90509250925092565b600082198211156100e157634e487b7160e01b600052601160045260246000fd5b500190565b60805160601c60a05160601c60c05160e051610ac9610146600039600081816101220152610538015260008181609c01526102c401526000818160d60152610651015260008181610174015281816103d001526106130152610ac96000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370dea79a1161005b57806370dea79a1461011d578063726b5bad146101445780639e34070f1461014c578063fc0c546a1461016f57600080fd5b80632e7ba6ef146100825780632eb4a7ab1461009757806361d027b3146100d1575b600080fd5b6100956100903660046108fb565b610196565b005b6100be7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b6100be7f000000000000000000000000000000000000000000000000000000000000000081565b610095610536565b61015f61015a3660046108c9565b610772565b60405190151581526020016100c8565b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b61019f85610772565b15610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060448201527f636c61696d65642e00000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1691810191909152605481018490526000906074016040516020818303038152906040528051906020012090506102ef8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508591506107b39050565b61037b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660448201527f2e000000000000000000000000000000000000000000000000000000000000006064820152608401610228565b61038486610862565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561041457600080fd5b505af1158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c91906108a0565b6104d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610228565b6040805187815273ffffffffffffffffffffffffffffffffffffffff871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b7f000000000000000000000000000000000000000000000000000000000000000042116105e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4d65726b6c654469737472696275746f723a2054696d656f7574206861736e2760448201527f74206578706972656400000000000000000000000000000000000000000000006064820152608401610228565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb907f00000000000000000000000000000000000000000000000000000000000000009083906370a082319060240160206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906108e2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f91906108a0565b50565b600080610781610100846109ad565b9050600061079161010085610a21565b60009283526020839052604090922054600190921b9182169091149392505050565b600081815b85518110156108575760008682815181106107d5576107d5610a64565b60200260200101519050808311610817576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610844565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061084f816109c1565b9150506107b8565b509092149392505050565b6000610870610100836109ad565b9050600061088061010084610a21565b6000928352602083905260409092208054600190931b9092179091555050565b6000602082840312156108b257600080fd5b815180151581146108c257600080fd5b9392505050565b6000602082840312156108db57600080fd5b5035919050565b6000602082840312156108f457600080fd5b5051919050565b60008060008060006080868803121561091357600080fd5b85359450602086013573ffffffffffffffffffffffffffffffffffffffff8116811461093e57600080fd5b935060408601359250606086013567ffffffffffffffff8082111561096257600080fd5b818801915088601f83011261097657600080fd5b81358181111561098557600080fd5b8960208260051b850101111561099a57600080fd5b9699959850939650602001949392505050565b6000826109bc576109bc610a35565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600082610a3057610a30610a35565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122052095d468ccbe21aba9a6d3c28f8f4fba767702dd7ab4f84b66c3a8f8b99a0a964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806370dea79a1161005b57806370dea79a1461011d578063726b5bad146101445780639e34070f1461014c578063fc0c546a1461016f57600080fd5b80632e7ba6ef146100825780632eb4a7ab1461009757806361d027b3146100d1575b600080fd5b6100956100903660046108fb565b610196565b005b6100be7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b6100be7f000000000000000000000000000000000000000000000000000000000000000081565b610095610536565b61015f61015a3660046108c9565b610772565b60405190151581526020016100c8565b6100f87f000000000000000000000000000000000000000000000000000000000000000081565b61019f85610772565b15610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d65726b6c654469737472696275746f723a2044726f7020616c72656164792060448201527f636c61696d65642e00000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60408051602081018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1691810191909152605481018490526000906074016040516020818303038152906040528051906020012090506102ef8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092508591506107b39050565b61037b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660448201527f2e000000000000000000000000000000000000000000000000000000000000006064820152608401610228565b61038486610862565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561041457600080fd5b505af1158015610428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044c91906108a0565b6104d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60448201527f65642e00000000000000000000000000000000000000000000000000000000006064820152608401610228565b6040805187815273ffffffffffffffffffffffffffffffffffffffff871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b7f000000000000000000000000000000000000000000000000000000000000000042116105e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4d65726b6c654469737472696275746f723a2054696d656f7574206861736e2760448201527f74206578706972656400000000000000000000000000000000000000000000006064820152608401610228565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb907f00000000000000000000000000000000000000000000000000000000000000009083906370a082319060240160206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906108e2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f91906108a0565b50565b600080610781610100846109ad565b9050600061079161010085610a21565b60009283526020839052604090922054600190921b9182169091149392505050565b600081815b85518110156108575760008682815181106107d5576107d5610a64565b60200260200101519050808311610817576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610844565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061084f816109c1565b9150506107b8565b509092149392505050565b6000610870610100836109ad565b9050600061088061010084610a21565b6000928352602083905260409092208054600190931b9092179091555050565b6000602082840312156108b257600080fd5b815180151581146108c257600080fd5b9392505050565b6000602082840312156108db57600080fd5b5035919050565b6000602082840312156108f457600080fd5b5051919050565b60008060008060006080868803121561091357600080fd5b85359450602086013573ffffffffffffffffffffffffffffffffffffffff8116811461093e57600080fd5b935060408601359250606086013567ffffffffffffffff8082111561096257600080fd5b818801915088601f83011261097657600080fd5b81358181111561098557600080fd5b8960208260051b850101111561099a57600080fd5b9699959850939650602001949392505050565b6000826109bc576109bc610a35565b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600082610a3057610a30610a35565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122052095d468ccbe21aba9a6d3c28f8f4fba767702dd7ab4f84b66c3a8f8b99a0a964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2502,
        "contract": "src/MerkleDistributor.sol:MerkleDistributor",
        "label": "claimedBitMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}